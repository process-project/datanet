codeTemplateBash = #!/bin/bash\n\
##- only invocations uploding, downloading or using a private repository require valid user proxy\n\n\
#generate base64 encoded proxy\n\
cat /path/to/proxy | base64 | tr -d '\\n' > /tmp/my_proxy_base64\n\
export PROXY=`cat /tmp/my_proxy_base64`\n\
#retrieval of all entity rows\n\
curl -H "GRID_PROXY: $PROXY" {repository_url}/{entity_name}\n\n\
#retrieval of a row with an id taken from the previous response\n\
curl -H "GRID_PROXY: $PROXY" {repository_url}/{entity_name}/{id}\n\n\
#new row upload\n\
curl -X POST -H "GRID_PROXY: $PROXY" {fields} {repository_url}/{entity_name}\n\n\
#edit entity row\n\
curl -X PUT -H "GRID_PROXY: $PROXY" {fields} {repository_url}/{entity_name}\n\n\
#delete entity row\n\
curl -X DELETE -H "GRID_PROXY: $PROXY" {repository_url}/{entity_name}/{id}
codeTemplateRuby = require 'rest_client'\n\
require 'json'\n\
require 'base64'\n\
##- only invocations uploding, downloading or using a private repository require valid user proxy\n\n\
#generate base64 encoded proxy\n\
proxy_payload = File.read('/path/to/proxy')\n\
proxy_payload_base64 = Base64.encode64(proxy_payload).gsub("\n", "")\n\
#retrieval of all entity rows\n\
repository = RestClient::Resource.new('{repository_url}/{entity_name}', :headers => {'GRID_PROXY' => proxy_payload_base64})\n\
response = repository.get\n\n\
#retrieval of a row with an id taken from the previous response\n\
repository = RestClient::Resource.new('{repository_url}/{entity_name}', :headers => {'GRID_PROXY' => proxy_payload_base64})\n\
response = repository['{id}'].get\n\n\
#new row upload\n\
repository = RestClient::Resource.new('{repository_url}/{entity_name}', :headers => {'GRID_PROXY' => proxy_payload_base64})\n\
jdata = {{fields}}.to_json\n\
repository.post jdata, content_type: :json\n\n\
#edit entity row\n\
repozytory = RestClient::Resource.new('{repository_url}/{entity_name}', :headers => {'GRID_PROXY' => proxy_payload_base64})\n\
jdata = {{fields}}.to_json\n\
repository['{id}'].put jdata, content_type: :json\n\n\
#delete entity row\n\
repository = RestClient::Resource.new('{repository_url}/{entity_name}', :headers => {'GRID_PROXY' => proxy_payload_base64})\n\
repository['{id}'].delete
codeTemplatePython = import requests\n\
import base64\n\
##- only invocations uploding, downloading or using a private repository require valid user proxy\n\n\
#generate base64 encoded proxy\n\
proxy_file = open('/path/to/proxy', 'r')\n\
proxy_payload = proxy_file.read()\n\
proxy_payload_base64 = base64.b64encode(proxy_payload)\n\
#retrieval of all entity rows\n\
response = requests.get('{repository_url}/{entity_name}', headers={'GRID_PROXY': proxy_payload_base64})\n\n\
#retrieval of a row with an id taken from the previous response\n\
response = requests.get('{repository_url}/{entity_name}/{id}', headers={'GRID_PROXY': proxy_payload_base64})\n\n\
#new row upload\n\
response = requests.post('{repository_url}/{entity_name}', headers={'GRID_PROXY': proxy_payload_base64}, {fields})\n\n\
#edit entity row\n\
requests.put('{repository_url}/{entity_name}'/{id}', headers={'GRID_PROXY': proxy_payload_base64}, {fields})\n\n\
#delete entity row\n\
requests.delete('{repository_url}/{entity_name}'/{id}', headers={'GRID_PROXY': proxy_payload_base64})
fieldRegularValue = value
fieldFileValue = path_to_file