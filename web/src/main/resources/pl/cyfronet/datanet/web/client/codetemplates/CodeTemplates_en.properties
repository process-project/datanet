codeTemplateBash = #!/bin/bash\n\
##- only invocations uploding, downloading or using a private repository require valid user credentials\n\
##- ommit the password for cURL to ask for it\n\n\
#retrieval of all entity rows\n\
curl -u user:password {repository_url}/{entity_name}\n\n\
#retrieval of a row with an id taken from the previous response\n\
curl -u user:password {repository_url}/{entity_name}/{id}\n\n\
#new row upload\n\
curl -u user:password {fields} {repository_url}/{entity_name}\n\n\
#edit entity row\n\
curl -X PUT -u login:haslo {fields} {repository_url}/{entity_name}\n\n\
#delete entity row\n\
curl -X DELETE -u login:haslo {repository_url}/{entity_name}/{id}
codeTemplateRuby = require 'rest_client'\n\
##- only invocations uploding, downloading or using a private repository require valid user credentials\n\n\
#retrieval of all entity rows\n\
repository = RestClient::Resource.new('{repository_url}/{entity_name}', :user => 'user', :password => 'password')\n\
response = repository.get\n\n\
#retrieval of a row with an id taken from the previous response\n\
repository = RestClient::Resource.new('{repository_url}/{entity_name}', :user => 'user', :password => 'password')\n\
response = repository['{id}'].get\n\n\
#new row upload\n\
repository = RestClient::Resource.new('{repository_url}/{entity_name}', :user => 'user', :password => 'password')\n\
jdata = {{fields}}.to_json\n\
repository.post jdata, content_type: :json\n\n\
#edit entity row\n\
repozytory = RestClient::Resource.new('{repository_url}/{entity_name}', :user => 'login', :password => 'haslo')\n\
jdata = {{fields}}.to_json\n\
repository['{id}'].put jdata, content_type: :json\n\n\
#delete entity row\n\
repository = RestClient::Resource.new('{repository_url}/{entity_name}', :user => 'login', :password => 'haslo')\n\
repository['{id}'].delete
codeTemplatePython = import requests\n\
##- only invocations uploding, downloading or using a private repository require valid user credentials\n\n\
#retrieval of all entity rows\n\
response = requests.get('{repository_url}/{entity_name}', auth = ('user', 'password'))\n\n\
#retrieval of a row with an id taken from the previous response\n\
response = requests.get('{repository_url}/{entity_name}/{id}', auth = ('user', 'password'))\n\n\
#new row upload\n\
response = requests.post('{repository_url}/{entity_name}', auth = ('user', 'password'), {fields})\n\n\
#edit entity row\n\
requests.put('http://mktest.datanet.cyfronet.pl/user/{id}', auth = ('login', 'haslo'), {fields})\n\n\
#delete entity row\n\
requests.delete('http://mktest.datanet.cyfronet.pl/user/{id}', auth = ('login', 'haslo'))
fieldRegularValue = value
fieldFileValue = path_to_file