codeTemplateBash = #!/bin/bash\n\
##- wywo\u0142ania, kt\u00f3re wgrywaj\u0105 lub pobieraj\u0105 plik i te korzystaj\u0105ce z repozytori\u00f3w prywatnych wymagaj\u0105 podania poprawnego loginu i has\u0142a\n\
##- prosz\u0119 pomin\u0105\u0107 podanie has\u0142a aby cURL o nie zapyta\u0142\n\n\
#pobranie wszystkich wierszy encji\n\
curl -u login:haslo {repository_url}/{entity_name}\n\n\
#pobranie wiersza dla id otrzymanego z poprzedniego \u017c\u0105dania\n\
curl -u login:haslo {repository_url}/{entity_name}/{id}\n\n\
#wgranie nowego wiersza\n\
curl -u login:haslo {fields} {repository_url}/{entity_name}\n\n\
#edycja istniej\u0105cego wiersza\n\
curl -X PUT -u login:haslo {fields} {repository_url}/{entity_name}\n\n\
#skasowanie istniej\u0105cego wiersza\n\
curl -X DELETE -u login:haslo {repository_url}/{entity_name}/{id}

codeTemplateRuby = require 'rest_client'\n\
require 'json'\n\
##- wywo\u0142ania, kt\u00f3re wgrywaj\u0105 lub pobieraj\u0105 plik i te korzystaj\u0105ce z repozytori\u00f3w prywatnych wymagaj\u0105 podania poprawnego loginu i has\u0142a\n\n\
#pobranie wszystkich wierszy encji\n\
repozytorium = RestClient::Resource.new('{repository_url}/{entity_name}', :user => 'login', :password => 'haslo')\n\
odpowiedz = repozytorium.get\n\n\
#pobranie wiersza dla id otrzymanego z poprzedniego \u017c\u0105dania\n\
repozytorium = RestClient::Resource.new('{repository_url}/{entity_name}', :user => 'login', :password => 'haslo')\n\
odpowiedz = repozytorium['{id}'].get\n\n\
#wgranie nowego wiersza\n\
repozytorium = RestClient::Resource.new('{repository_url}/{entity_name}', :user => 'login', :password => 'haslo')\n\
jdata = {{fields}}.to_json\n\
repozytorium.post jdata, content_type: :json\n\n\
#edycja istniej\u0105cego wiersza\n\
repozytorium = RestClient::Resource.new('{repository_url}/{entity_name}', :user => 'login', :password => 'haslo')\n\
jdata = {{fields}}.to_json\n\
repozytorium['{id}'].put jdata, content_type: :json\n\n\
#skasowanie istniej\u0105cego wiersza\n\
repozytorium = RestClient::Resource.new('{repository_url}/{entity_name}', :user => 'login', :password => 'haslo')\n\
repozytorium['{id}'].delete

codeTemplatePython = import requests\n\
##- wywo\u0142ania, kt\u00f3re wgrywaj\u0105 lub pobieraj\u0105 plik i te korzystaj\u0105ce z repozytori\u00f3w prywatnych wymagaj\u0105 podania poprawnego loginu i has\u0142a\n\n\
#pobranie wszystkich wierszy encji\n\
odpowiedz = requests.get('{repository_url}/{entity_name}', auth = ('login', 'haslo'))\n\n\
#pobranie wiersza dla id otrzymanego z poprzedniego \u017c\u0105dania\n\
odpowiedz = requests.get('{repository_url}/{entity_name}/{id}', auth = ('login', 'haslo'))\n\n\
#wgranie nowego wiersza\n\
odpowiedz = requests.post('{repository_url}/{entity_name}', auth = ('login', 'haslo'), {fields})\n\n\
#edycja istniej\u0105cego wiersza\n\
requests.put('http://mktest.datanet.cyfronet.pl/user/{id}', auth = ('login', 'haslo'), {fields})\n\n\
#skasowanie istniej\u0105cego wiersza\n\
requests.delete('http://mktest.datanet.cyfronet.pl/user/{id}', auth = ('login', 'haslo'))
fieldRegularValue = wartosc
fieldFileValue = sciezka_do_pliku