codeTemplateBash = #!/bin/bash\n\
##- wywo\u0142ania, kt\u00f3re wgrywaj\u0105 lub pobieraj\u0105 plik i te korzystaj\u0105ce z repozytori\u00f3w prywatnych wymagaj\u0105 podania poprawnego certyfikatu proxy\n\n\
#generowanie proxy zakodowanego przy u\u017cyciu base64\n\
cat /path/to/proxy | base64 | tr -d '\\n' > /tmp/my_proxy_base64\n\
export PROXY=`cat /tmp/my_proxy_base64`\n\n\
#pobranie wszystkich wierszy encji\n\
curl -H "GRID_PROXY: $PROXY" {repository_url}/{entity_name}\n\n\
#pobranie wiersza dla id otrzymanego z poprzedniego \u017c\u0105dania\n\
curl -H "GRID_PROXY: $PROXY" {repository_url}/{entity_name}/{id}\n\n\
#wgranie nowego wiersza\n\
curl -X POST -H "GRID_PROXY: $PROXY" {fields} {repository_url}/{entity_name}\n\n\
#edycja istniej\u0105cego wiersza\n\
curl -X PUT -H "GRID_PROXY: $PROXY" {fields} {repository_url}/{entity_name}\n\n\
#skasowanie istniej\u0105cego wiersza\n\
curl -X DELETE -H "GRID_PROXY: $PROXY" {repository_url}/{entity_name}/{id}

codeTemplateRuby = require 'rest_client'\n\
require 'json'\n\
require 'base64'\n\
##- wywo\u0142ania, kt\u00f3re wgrywaj\u0105 lub pobieraj\u0105 plik i te korzystaj\u0105ce z repozytori\u00f3w prywatnych wymagaj\u0105 podania poprawnego certyfikatu proxy\n\n\
#generowanie proxy zakodowanego przy u\u017cyciu base64\n\
proxy = File.read('/sciezka/do/certyfikatu/proxy')\n\
proxy_base64 = Base64.encode64(proxy).gsub("\n", "")\n\n\
#pobranie wszystkich wierszy encji\n\
repozytorium = RestClient::Resource.new('{repository_url}/{entity_name}', :headers => {'GRID_PROXY' => proxy_base64})\n\
odpowiedz = repozytorium.get\n\n\
#pobranie wiersza dla id otrzymanego z poprzedniego \u017c\u0105dania\n\
repozytorium = RestClient::Resource.new('{repository_url}/{entity_name}', :headers => {'GRID_PROXY' => proxy_base64})\n\
odpowiedz = repozytorium['{id}'].get\n\n\
#wgranie nowego wiersza\n\
repozytorium = RestClient::Resource.new('{repository_url}/{entity_name}', :headers => {'GRID_PROXY' => proxy_base64})\n\
jdata = {{fields}}.to_json\n\
repozytorium.post jdata, content_type: :json\n\n\
#edycja istniej\u0105cego wiersza\n\
repozytorium = RestClient::Resource.new('{repository_url}/{entity_name}', :headers => {'GRID_PROXY' => proxy_base64})\n\
jdata = {{fields}}.to_json\n\
repozytorium['{id}'].put jdata, content_type: :json\n\n\
#skasowanie istniej\u0105cego wiersza\n\
repozytorium = RestClient::Resource.new('{repository_url}/{entity_name}', :headers => {'GRID_PROXY' => proxy_base64})\n\
repozytorium['{id}'].delete

codeTemplatePython = import requests\n\
import base64\n\
##- wywo\u0142ania, kt\u00f3re wgrywaj\u0105 lub pobieraj\u0105 plik i te korzystaj\u0105ce z repozytori\u00f3w prywatnych wymagaj\u0105 podania poprawnego certyfikatu proxy\n\n\
#generowanie proxy zakodowanego przy u\u017cyciu base64\n\
plik_z_proxy = open('/sciezka/do/certyfikatu/proxy', 'r')\n\
proxy = plik_z_proxy.read()\n\
proxy_base64 = base64.b64encode(proxy)\n\n\
#pobranie wszystkich wierszy encji\n\
odpowiedz = requests.get('{repository_url}/{entity_name}', headers={'GRID_PROXY': proxy_base64})\n\n\
#pobranie wiersza dla id otrzymanego z poprzedniego \u017c\u0105dania\n\
odpowiedz = requests.get('{repository_url}/{entity_name}/{id}', headers={'GRID_PROXY': proxy_base64})\n\n\
#wgranie nowego wiersza\n\
odpowiedz = requests.post('{repository_url}/{entity_name}', headers={'GRID_PROXY': proxy_base64}, {fields})\n\n\
#edycja istniej\u0105cego wiersza\n\
requests.put('http://mktest.datanet.cyfronet.pl/user/{id}', headers={'GRID_PROXY': proxy_base64}, {fields})\n\n\
#skasowanie istniej\u0105cego wiersza\n\
requests.delete('http://mktest.datanet.cyfronet.pl/user/{id}', headers={'GRID_PROXY': proxy_base64})
fieldRegularValue = wartosc
fieldFileValue = sciezka_do_pliku